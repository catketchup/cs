#+STARTUP: indent
Git note
* log
** 2019
10/26
- liao
* 廖雪峰git
- working directory
- repository
- ssh-keygen
- 搭建git服务器
- master, HEAD, pointer
** concepts
- working directory
- stage
- repository
- HEAD
** version

- git log 
- git reset --hard HEAD^: go to the previous version in repository
- git reset --hard <commit ID>
- git reflog

- git checkout <file>: checkout to the latest version in repository or checkout from stage to working directory

** branch
create and merge
- git checkout -b <branch>/ git switch -c <branch>
- git checkout <branch>/git switch <branck>
- git branch -d <branch>
- git merge <branch>: merge the branch with master, should switch to master before merge

conflict
- "git status" can be used to check the conflict of branches
- resolve the conflicts in the file then add and commit

manage
- git log --graph/ git log --graph --pretty=oneline --abbrev-commit

bug branch
- git stash
- git merge --no-ff -m "merged bug fix 101" issue-101
- git stash list
- git stash apply, git stash drop/ git stash pop
- git cherry-pick "commit ID"

## all branches share the same working directory and stage?
## stash before switch branch
** remote
- git remote add origin "address"
- git push -u origin master

- git remote -v
- git push origin branch-name; if failed: git pull
- 在本地创建和远程分支对应的分支: git checkout -b branch-name origin/branch-name, 本地和远程分支的名称最好一致
- git fetch
- 建立本地分支和远程分支的关联: git branch --set-upstream branch-name origin/branch-name/ git branch --set-upstream-to=origin/branch-name branch-name
- 从远程抓取分支: git pull，如果有冲突，要先处理冲突。

- "unrelated history": git pull --allow-unrelated-histories

** rebase

* large file
* git
** push without username and password
- https://medium.com/@amanze.ogbonna/accessing-pushing-to-github-without-username-and-password-3022feb077fb
** 1
- some basic commands
- git clone <address> <where to clone>
- git init
- git add -A/git add <filename>
- git commit -m "<commit>"
- git reset
- git branch <branchname>, git checkout <branchname>
- git checkout -b <branchname> #create a branch and check it out
- git push -u <address> <branchname>
- git clone <address>
- git --version
- git config --global user.name "<name>"
- git config --global user.email "<email>"
- git config --list
- git help config
- git branch --merged #tell us the branch we've merged
- git merge <branchname>
- git diff
- git log
- git branch -d <branchname>

- git remote add origin https://github.com/catketchup/astro-python.git
- git push -u origin master
- git pull origin <branchname of remote>
  
** 2
- git branch -m <newname> #if you are on the branch you want to rename
- git branch -m <oldname> <newname> #if you are on a different branch
** 3
- add and commit as long as the file is changed
- check branch you are in everytime
- add and commit befor
** reset and revert
- https://blog.csdn.net/yxlshk/article/details/79944535
- git log
- git reset --hard [version number]
- git push -f -u origin master
** remote
- git remote add origin <address>
- git push -u origin master
- git config --get remote.origin.url: show the remote URL
- git remote -v: show remote origin
- git remote show origin: show the full output or referential integrity
- git remote set-url origin <address>: change a remote's URL(https://help.github.com/en/articles/changing-a-remotes-url)
- 
** github

# hi
* keygen
- ssh-keygen -t rsa -C "your email"
- ~/.ssh
* upgrade
#!/bin/bash
sudo add-apt-repository -y ppa:git-core/ppa
sudo apt-get update
sudo apt-get install git -y
